{"/home/travis/build/npmtest/node-npmtest-grunt-browserify/test.js":"/* istanbul instrument in package npmtest_grunt_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-browserify/lib.npmtest_grunt_browserify.js":"/* istanbul instrument in package npmtest_grunt_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_browserify = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_browserify = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-browserify/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-browserify && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_browserify */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_browserify\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_browserify.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_browserify.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_browserify.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_browserify.__dirname + '/lib.npmtest_grunt_browserify.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-browserify/node_modules/grunt-browserify/tasks/browserify.js":"/*\n* grunt-browserify\n* https://github.com/jmreidy/grunt-browserify\n*\n* Copyright (c) 2013 Justin Reidy\n* Licensed under the MIT license.\n*/\nvar Runner = require('../lib/runner');\nvar path = require('path');\nvar async = require('async');\nvar browserify = require('browserify');\nvar watchify = require('watchify');\n\nmodule.exports = Task;\n\nfunction Task (grunt) {\n  grunt.registerMultiTask('browserify', 'Grunt task for browserify.', function () {\n\n    // set default options\n    var options = this.options({\n      banner: ''\n    });\n\n    async.each(this.files, function (file, next) {\n      Task.runTask(grunt, options, file, next);\n    }, this.async());\n  });\n}\n\nTask.runTask = function (grunt, options, file, next) {\n  var runner = new Runner({\n    writer: grunt.file,\n    logger: grunt,\n    browserify: browserify,\n    watchify: watchify\n  });\n  var files = grunt.file.expand({filter: 'isFile'}, file.src).map(function (f) {\n    return path.resolve(f);\n  });\n  runner.run(files, file.dest, options, next);\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-browserify/node_modules/grunt-browserify/lib/runner.js":"var _ = require('lodash');\nvar path = require('path');\nvar resolve = require('resolve');\nvar glob = require('glob');\n\nmodule.exports = GruntBrowserifyRunner;\n\nfunction GruntBrowserifyRunner(options) {\n  this.browserify = options.browserify;\n  this.watchify = options.watchify;\n  this.logger = options.logger;\n  this.writer = options.writer;\n  this.firstBuild = true;\n}\n\nGruntBrowserifyRunner.prototype = _.create(GruntBrowserifyRunner.prototype, {\n  run: function (files, destination, options, next) {\n    var self = this;\n\n    //set constructor options and instantiate\n    var bOpts = _.cloneDeep(options.browserifyOptions) || {};\n    bOpts.entries = bOpts.entries || files;\n\n    // watchify options\n    var wOpts = options.watchifyOptions || {};\n\n    // Watchify requires specific arguments\n    if(options.watch) {\n      bOpts = _.extend({ cache: {}, packageCache: {} }, bOpts);\n    }\n\n    //determine watchify or browserify\n    var b = options.watch ? this.watchify(this.browserify(bOpts), wOpts) : this.browserify(bOpts);\n\n    b.on('error', function (err) {\n      self.logger.fail.warn(err);\n    });\n\n    if(options.bundleOptions) {\n      throw new Error('bundleOptions is no longer used. Move all option in browserifyOptions.');\n    }\n\n    if(options.alias) {\n      if(_.isPlainObject(options.alias)) {\n        for(var alias in options.alias) {\n          b.require(options.alias[alias], {expose: alias});\n        }\n      }\n      else {\n        requireFiles(b, options.alias);\n      }\n    }\n\n    if(options.require) {\n      requireFiles(b, options.require);\n    }\n\n    if (options.exclude) {\n      _.forEach(options.exclude, function (file) {\n        runOptionForGlob(b, 'exclude', file);\n      });\n    }\n\n    if (options.ignore) {\n      _.forEach(options.ignore, function (file) {\n        runOptionForGlob(b, 'ignore', file);\n      });\n    }\n\n    if (options.external) {\n      // allow externalizing of alias object\n      if(_.isPlainObject(options.external)) {\n        for(var id in options.external) {\n          if (testForGlob(id)) {\n            runOptionForGlob(b, 'external', id);\n          }\n          else {\n            b.external(id);\n          }\n        }\n      }\n      else {\n        _.forEach(options.external, function (id) {\n          //allow externalizing of require lists\n          if (id.match(':')) {\n            id = id.split(':')[1];\n          }\n\n          if (testForGlob(id)) {\n            runOptionForGlob(b, 'external', id);\n          }\n          else {\n            b.external(id);\n          }\n        });\n      }\n    }\n\n    if (options.transform) {\n      _.forEach(options.transform, function (transformer) {\n        b.transform(transformer);\n      });\n    }\n\n    if (options.plugin) {\n      _.forEach(options.plugin, function (plugin) {\n        b.plugin(plugin);\n      });\n    }\n\n\n    var destPath = this.createDestDir(destination);\n    var keepAlive = this.keepAliveFn.bind(this, destination);\n    var done = options.keepAlive? keepAlive : next;\n    var bundleComplete = this.onBundleComplete(destination, options, done);\n\n    if (options.watch) {\n      var bundleUpdate = this.onBundleComplete(destination, options, keepAlive);\n      b.on('update', function (ids) {\n        ids.forEach(function (id) {\n          self.logger.log.ok(id.cyan + ' changed, updating bundle.');\n        });\n        doBundle(b, options, bundleUpdate);\n      });\n    }\n\n    if (options.configure) {\n      options.configure(b);\n    }\n\n    doBundle(b, options, bundleComplete);\n  },\n\n  createDestDir: function (destination) {\n    var destPath = path.dirname(path.resolve(destination));\n    if (!this.writer.exists(destPath)) {\n      this.writer.mkdir(destPath);\n    }\n    return destPath;\n  },\n\n  keepAliveFn: function (destination) {\n    //this.logger.log.ok('Watchifying...');\n  },\n\n  onBundleComplete: function (destination, options, next) {\n    var self = this;\n    return function (err, buf) {\n      if (err) {\n        self.logger.log.error(err);\n        if (self.firstBuild || !options.keepAlive) {\n          self.logger.fail.warn('Error running grunt-browserify.');\n        }\n      }\n      else if (buf) {\n          // prepend the banner\n          if(options.banner) {\n              buf = Buffer.concat([new Buffer(options.banner + '\\n', 'utf8'), buf]);\n          }\n\n        self.logger.log.ok('Bundle ' + destination.cyan + ' created. ' + (options.keepAlive ? 'Watchifying...' : ''));\n        self.writer.write(destination, buf);\n      }\n\n      self.firstBuild = false;\n      next();\n    };\n  }\n});\n\nfunction doBundle(browserifyInstance, opts, bundleComplete) {\n  if (opts.preBundleCB) {\n    opts.preBundleCB(browserifyInstance);\n  }\n\n  browserifyInstance.bundle(function (err, buf) {\n    if (opts.postBundleCB) {\n      opts.postBundleCB(err, buf, bundleComplete);\n    }\n    else {\n      bundleComplete(err, buf);\n    }\n  })\n  // Need this to ensure it works on MacOS\n  // See 'important' note here: https://github.com/substack/watchify#var-w--watchifyb-opts\n  .on('data', function() {});\n}\n\nfunction testForGlob(id) {\n  return (/\\*/.test(id));\n}\n\nfunction runOptionForGlob(browserifyInstance, method, pattern) {\n  var files = glob.sync(pattern);\n  if (!files || files.length < 1) {\n    //it's not a glob, it's a file / module path\n    files = [pattern];\n  }\n  files.forEach(function (f) {\n    browserifyInstance[method].call(browserifyInstance, f);\n  });\n}\n\nfunction requireFiles(b, requiredFiles) {\n  _.forEach(requiredFiles, function (file) {\n    var filePath, opts;\n    if (Array.isArray(file)) {\n      filePath = file[0];\n      opts = file[1];\n    }\n    else {\n      var filePair = file.split(':');\n      filePath = filePair[0];\n      opts = {\n        expose: filePair.length === 1 ? filePair[0] : filePair[1]\n      };\n    }\n    b.require(filePath, opts);\n  });\n}"}